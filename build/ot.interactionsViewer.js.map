{"version":3,"sources":["node_modules/browser-pack/_prelude.js","browser.js","index.js","node_modules/tnt.api/index.js","node_modules/tnt.api/src/api.js","src/interactionsViewer.js"],"names":[],"mappings":"AAAA;;;ACAA;;AAEA,OAAO,OAAP,GAAiB,QAAQ,YAAR,EAAsB,OAAvC;;;;;;;;;ACFA;;;;;;;AAEA;;;AAGA;;AAEA;AACA;AACA;;;ACTA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;kBCrLe,YAAY;;AAEvB,QAAI,WAAW,GAAG,QAAH,CAAa,OAAb,EAAsB,UAAtB,EAAkC,WAAlC,EAA+C,UAA/C,EAA2D,QAA3D,EAAqE,UAArE,EAAiF,aAAjF,CAAf;;AAEA,QAAI,SAAS;AACT,cAA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","file":"ot.interactionsViewer.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// module.exports = require('./src/interactionsViewer').default;\n\nmodule.exports = require('./index.js').default;\n","import interactionsViewer from './src/interactionsViewer.js';\nexport default interactionsViewer;\n// module.exports = interactionsViewer;\n\n\n// module.exports = require('./src/interactionsViewer').default;\n\n// module.exports = interactionsViewer = function() {\n//     console.log(\"interaction viewer here\");\n// };\n","module.exports = require(\"./src/api.js\");\n","var api = function (who) {\n\n    var _methods = function () {\n\tvar m = [];\n\n\tm.add_batch = function (obj) {\n\t    m.unshift(obj);\n\t};\n\n\tm.update = function (method, value) {\n\t    for (var i=0; i<m.length; i++) {\n\t\tfor (var p in m[i]) {\n\t\t    if (p === method) {\n\t\t\tm[i][p] = value;\n\t\t\treturn true;\n\t\t    }\n\t\t}\n\t    }\n\t    return false;\n\t};\n\n\tm.add = function (method, value) {\n\t    if (m.update (method, value) ) {\n\t    } else {\n\t\tvar reg = {};\n\t\treg[method] = value;\n\t\tm.add_batch (reg);\n\t    }\n\t};\n\n\tm.get = function (method) {\n\t    for (var i=0; i<m.length; i++) {\n\t\tfor (var p in m[i]) {\n\t\t    if (p === method) {\n\t\t\treturn m[i][p];\n\t\t    }\n\t\t}\n\t    }\n\t};\n\n\treturn m;\n    };\n\n    var methods    = _methods();\n    var api = function () {};\n\n    api.check = function (method, check, msg) {\n\tif (method instanceof Array) {\n\t    for (var i=0; i<method.length; i++) {\n\t\tapi.check(method[i], check, msg);\n\t    }\n\t    return;\n\t}\n\n\tif (typeof (method) === 'function') {\n\t    method.check(check, msg);\n\t} else {\n\t    who[method].check(check, msg);\n\t}\n\treturn api;\n    };\n\n    api.transform = function (method, cbak) {\n\tif (method instanceof Array) {\n\t    for (var i=0; i<method.length; i++) {\n\t\tapi.transform (method[i], cbak);\n\t    }\n\t    return;\n\t}\n\n\tif (typeof (method) === 'function') {\n\t    method.transform (cbak);\n\t} else {\n\t    who[method].transform(cbak);\n\t}\n\treturn api;\n    };\n\n    var attach_method = function (method, opts) {\n\tvar checks = [];\n\tvar transforms = [];\n\n\tvar getter = opts.on_getter || function () {\n\t    return methods.get(method);\n\t};\n\n\tvar setter = opts.on_setter || function (x) {\n\t    for (var i=0; i<transforms.length; i++) {\n\t\tx = transforms[i](x);\n\t    }\n\n\t    for (var j=0; j<checks.length; j++) {\n\t\tif (!checks[j].check(x)) {\n\t\t    var msg = checks[j].msg || \n\t\t\t(\"Value \" + x + \" doesn't seem to be valid for this method\");\n\t\t    throw (msg);\n\t\t}\n\t    }\n\t    methods.add(method, x);\n\t};\n\n\tvar new_method = function (new_val) {\n\t    if (!arguments.length) {\n\t\treturn getter();\n\t    }\n\t    setter(new_val);\n\t    return who; // Return this?\n\t};\n\tnew_method.check = function (cbak, msg) {\n\t    if (!arguments.length) {\n\t\treturn checks;\n\t    }\n\t    checks.push ({check : cbak,\n\t\t\t  msg   : msg});\n\t    return this;\n\t};\n\tnew_method.transform = function (cbak) {\n\t    if (!arguments.length) {\n\t\treturn transforms;\n\t    }\n\t    transforms.push(cbak);\n\t    return this;\n\t};\n\n\twho[method] = new_method;\n    };\n\n    var getset = function (param, opts) {\n\tif (typeof (param) === 'object') {\n\t    methods.add_batch (param);\n\t    for (var p in param) {\n\t\tattach_method (p, opts);\n\t    }\n\t} else {\n\t    methods.add (param, opts.default_value);\n\t    attach_method (param, opts);\n\t}\n    };\n\n    api.getset = function (param, def) {\n\tgetset(param, {default_value : def});\n\n\treturn api;\n    };\n\n    api.get = function (param, def) {\n\tvar on_setter = function () {\n\t    throw (\"Method defined only as a getter (you are trying to use it as a setter\");\n\t};\n\n\tgetset(param, {default_value : def,\n\t\t       on_setter : on_setter}\n\t      );\n\n\treturn api;\n    };\n\n    api.set = function (param, def) {\n\tvar on_getter = function () {\n\t    throw (\"Method defined only as a setter (you are trying to use it as a getter\");\n\t};\n\n\tgetset(param, {default_value : def,\n\t\t       on_getter : on_getter}\n\t      );\n\n\treturn api;\n    };\n\n    api.method = function (name, cbak) {\n\tif (typeof (name) === 'object') {\n\t    for (var p in name) {\n\t\twho[p] = name[p];\n\t    }\n\t} else {\n\t    who[name] = cbak;\n\t}\n\treturn api;\n    };\n\n    return api;\n    \n};\n\nmodule.exports = exports = api;","import apijs from 'tnt.api';\n\n\nexport default function () {\n\n    let dispatch = d3.dispatch (\"click\", \"dblclick\", \"mouseover\", \"mouseout\", \"select\", \"unselect\", \"interaction\");\n\n    let config = {\n        data: undefined,\n        size: 500,  // default graph size\n        labelSize: 100,\n        nodeArc: 12,\n        colorScale: d3.scale.linear()\n            .range([d3.rgb(\"#007AFF\"), d3.rgb('#FFF500')]) // The domain is set dynamically\n    };\n    let fixedNodes = new Map();\n    let radius;\n    let labels;\n\n    const render = function (div) {\n        if (!div) {\n            console.error('No container DOM element provided');\n            return;\n        }\n\n        // Set the domain of the color scale based on the real data length\n        const dataDomain = calcInteractionsDomain(config.data);\n        config.colorScale.domain(dataDomain);\n\n        // Calculates how much space is needed for the whole visualisation given the number of nodes / labels\n        radius = calcRadius(config.data.length, config.nodeArc);\n        let diameter = radius * 2;\n\n        let size = diameter + (2*config.labelSize);\n        if (size < config.size) {\n            size = config.size;\n            diameter = size - (2*config.labelSize);\n            radius = ~~(diameter / 2);\n        } else {\n            config.size = size;\n        }\n\n        // svg\n        const svg = d3.select(div)\n            .append(\"div\")\n            .style(\"position\", \"relative\")\n            .append(\"svg\")\n            .attr(\"width\", config.size)\n            .attr(\"height\", config.size);\n\n        const graph = svg\n            .append(\"g\")\n            .attr(\"transform\", `translate(${radius + config.labelSize},${radius + config.labelSize})`);\n\n        update(config.data);\n\n        function update(data = []) {\n            let stepRad = 360 / data.length;\n\n\n            let currAngle = 0;\n\n            for (let link of data) {\n                // let {is_directed:isDirected, is_inhibition:isInhibition, is_stimulation:isStimulation, source, target} = link;\n\n                link.angle = currAngle;\n                currAngle += (stepRad * Math.PI / 180);\n            }\n\n            // Labels\n            // Central\n            // graph.append(\"g\")\n            //     .append(\"circle\")\n            //     .attr(\"cx\", 0)\n            //     .attr(\"cy\", 0)\n            //     .attr(\"r\", 5)\n            //     .attr(\"fill\", \"#005299\");\n\n            // All other labels\n            labels = graph.selectAll(\".openTargets_interactions_label\")\n                .data(data, d => d.label);\n\n            labels\n                .enter()\n                .append(\"g\")\n                .attr(\"class\", \"openTargets_interactions_label\")\n                .attr(\"transform\", (d) => {\n                    const x = diameter / 2 * Math.cos(d.angle);\n                    const y = diameter / 2 * Math.sin(d.angle);\n                    return (`translate(${x},${y})`);\n                })\n                .attr(\"fill\", \"grey\")\n                .on(\"mouseover\", function (d) { // No arrow function here because we need the moused over element as _this_\n                    dispatch.mouseover.call(this, d);\n                })\n                .on(\"mouseout\", function (d) { // No arrow function here because we need the moused over element as _this_\n                    dispatch.mouseout.call(this, d);\n                })\n                .on(\"click\", function (d) { // No arrow function here because we need the moused over element as _this_\n                    // dispatch.click.call(this, d);\n                    fix.call(this, d, true);\n                });\n\n            // Labels\n            labels\n                .append(\"text\")\n                .style(\"font-size\", \"12px\")\n                .style(\"text-anchor\", (d) => {\n                    let grades = d.angle * 180 / Math.PI;\n                    if (grades % 360 > 90 && grades % 360 < 275) {\n                        return \"end\";\n                    }\n                    return \"start\";\n                })\n                .text(d => d.label)\n                .attr(\"alignment-baseline\", \"central\")\n                .attr(\"transform\", (d) => {\n                    let grades = d.angle * 180 / Math.PI;\n                    if (grades % 360 > 90 && grades % 360 < 275) {\n                        return `translate(${10 * Math.cos(d.angle)},${10 * Math.sin(d.angle)}) rotate(${grades % 360 + 180})`;\n                    }\n                    return `translate(${10 * Math.cos(d.angle)},${10 * Math.sin(d.angle)}) rotate(${grades % 360})`;\n                });\n\n            // links\n            // We need a data structure with the angles.\n            const k = new Map();\n            for (let n of data) {\n                k.set(n.label, n.angle);\n            }\n            labels\n                .each(function (source) {\n                    let fromAngle = source.angle;\n                    for (let dest of Object.values(source.interactsWith)) {\n                        let toAngle = k.get(dest.label);\n                        let fromX = (diameter-7) / 2 * Math.cos(fromAngle);\n                        let fromY = (diameter-7) / 2 * Math.sin(fromAngle);\n                        let toX = (diameter-7) / 2 * Math.cos(toAngle);\n                        let toY = (diameter-7) / 2 * Math.sin(toAngle);\n                        graph.append(\"path\")\n                            //.datum(source)\n                            .datum({\n                                source: source,\n                                dest: dest\n                            })\n                            .attr(\"class\", \"openTargets_interactions_link\")\n                            .attr(\"d\", `M${fromX},${fromY} Q0,0 ${toX},${toY}`)\n                            .attr(\"fill\", \"none\")\n                            .attr(\"stroke\", \"#1e5799\")\n                            .attr(\"stroke-width\", 1);\n                    }\n                });\n\n            // Nodes\n            labels\n                .append(\"circle\")\n                // .attr(\"fill\", \"#005299\")\n                .attr(\"fill\", (data) => {\n                    return config.colorScale(Object.keys(data.interactsWith).length);\n                })\n                .attr(\"cx\", 0)\n                .attr(\"cy\", 0)\n                .attr(\"r\", 5);\n\n\n            function fixedNodesHasLinkWith (node) {\n                let interacts = false;\n                fixedNodes.forEach(function (val, key) {\n                    for (let [key, inter] of Object.entries(val.interactsWith)) {\n                        if (inter.label === node.label) {\n                            interacts = true;\n                            break;\n                        }\n                    }\n                });\n                return interacts;\n            }\n\n            // Simulates a click in a node\n            render.click = function (node) {\n                console.log(\"IV has been asked to unselect this node...\");\n                console.log(node);\n\n                // Find the element for the node\n                let elem;\n                d3.selectAll('.openTargets_interactions_label')\n                    .each(function (d) {\n                        if (d == node) {\n                            elem = this;\n                        }\n                    });\n\n                if (elem) {\n                    console.log(\"simulating a click on node...\");\n                    console.log(elem);\n                    fix.call(elem, node, false);\n                } else {\n                    throw (\"Can't find node\");\n                }\n            };\n\n            function fix(node, events) { // if events is truthy, fire events for each select / unselect action\n                const clickedNode = this;\n\n                // Specs:\n                // 1. If there is no other node selected, select this one\n                // 2. If there is another node selected and there is a connection between both, show details\n                // 3. If there is another node selected and there is no connection between them, this one is the only selected\n                // 4. If the selected node is already selected, deselect it\n                // 5. If the are already 2 selected nodes and this is not one of them, select only this one.\n\n                // TODO: dispatching select and unselect should be done centrally by combining the operations on the Map with the dispathing\n                // Case 1\n                if (!fixedNodes.size) {\n                    if (events) {\n                        select.call(clickedNode, node);\n                    }\n                    fixedNodes.set(node.label, node);\n                    dispatch.select.call(clickedNode, node);\n                } else if (fixedNodes.has(node.label)) {\n                    fixedNodes.delete(node.label);\n                    if (events) {\n                        dispatch.unselect.call(clickedNode, node);\n                    }\n                    if (!fixedNodes.size) { // We only had 1 node selected and is now unselected\n                        // Case 4\n                        unselect.call(clickedNode, node);\n                    } else {\n                        // We have deselected, but there is still one selected. So take the other one and select it\n                        let otherNode = fixedNodes.keys().next().value;\n                        select.call(clickedNode, fixedNodes.get(otherNode));\n                        // fixedNodes.set(node.label, node);\n                    }\n                } else { // New node selected...\n                    // If there are already 2 nodes selected, select only this one\n                    if (fixedNodes.size === 2) {\n                        select.call(clickedNode, node);\n                        fixedNodes.clear();\n                        fixedNodes.set(node.label, node);\n                        if (events) {\n                            dispatch.select.call(clickedNode, node);\n                        }\n                    } else { // There is already one node selected. Two cases here: there exists a connection between them or not\n                        if (fixedNodesHasLinkWith(node)) {\n                            fixedNodes.set(node.label, node);\n                            if (events) {\n                                dispatch.select.call(clickedNode, node);\n                            }\n                            select2.call(clickedNode, fixedNodes);\n                        } else { // No link between both, so just select\n                            fixedNodes.clear();\n                            fixedNodes.set(node.label, node);\n                            if (events) {\n                                dispatch.select.call(clickedNode, node);\n                            }\n                            select.call(clickedNode, node);\n                        }\n                    }\n                }\n            }\n\n            function unselect(d) {\n                // dispatch.unselect.call(this, d);\n\n                d3.selectAll(\".openTargets_interactions_link\")\n                    .attr(\"opacity\", 1);\n                d3.selectAll(\".openTargets_interactions_label\")\n                    .attr(\"fill\", \"grey\")\n                    .attr(\"opacity\", 1);\n                d3.select(this).attr(\"fill\", \"grey\");\n            }\n\n            function select(d) {\n                // dispatch.select.call(this, d);\n                // fade out other links\n                d3.selectAll(\".openTargets_interactions_link\")\n                    .attr(\"opacity\", (data) => {\n                        if (d.label === data.source.label) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n\n                // fade out the labels / nodes\n                d3.selectAll(\".openTargets_interactions_label\")\n                    .attr(\"fill\", (data) => {\n                        if (d.label === data.label) {\n                            return \"red\";\n                        }\n                        return \"grey\";\n                    })\n                    .attr(\"opacity\", (data) => {\n                        if (d.label === data.label) {\n                            return 1;\n                        }\n                        for (let inter of Object.values(data.interactsWith)) {\n                            if (inter.label === d.label) {\n                                return 1;\n                            }\n                        }\n                        return 0;\n                    });\n            }\n\n            function select2(fixedNodes) {\n                // dispatch.select.call(this, d3.select(this).datum());\n                const clickedNode = this;\n                d3.select(this).attr(\"fill\", \"red\");\n\n                // dispatch.select2.call(this, d);\n                // fade out other links\n                d3.selectAll(\".openTargets_interactions_link\")\n                    .attr(\"opacity\", (data) => {\n                        if (fixedNodes.has(data.source.label) && fixedNodes.has(data.dest.label)) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n\n                // fade out other labels\n                d3.selectAll(\".openTargets_interactions_label\")\n                    .attr(\"opacity\", (data) => {\n                        if (fixedNodes.has(data.label)) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n\n                // Fire the interaction event\n                let interObj = {};\n                let iNames = [];\n                for (const iName of fixedNodes.keys()) {\n                    iNames.push(iName);\n                }\n                let interactions = [];\n                console.log(\"interactors:\");\n                console.log(fixedNodes.get(iNames[0]));\n                console.log(fixedNodes.get(iNames[1]));\n                let iw = fixedNodes.get(iNames[0]).interactsWith;\n                let i2 = fixedNodes.get(iNames[1]).label;\n                Object.keys(iw).forEach(function (i) {\n                    if (iw[i].label === i2) {\n                        interactions = iw[i].provenance;\n                    }\n                });\n                interObj = {\n                    interactor1: iNames[0],\n                    interactor2: iNames[1],\n                    provenance: interactions\n                };\n\n                dispatch.interaction.call(clickedNode, interObj);\n            }\n\n        }\n\n        function calcInteractionsDomain(data) {\n            let min = Infinity;\n            let max = 0;\n            for (let i = 0; i < data.length; i++) {\n                let d = data[i];\n                let il = Object.keys(d.interactsWith).length;\n                if (il > max) {\n                    max = il;\n                }\n                if (il < min) {\n                    min = il;\n                }\n            }\n            return [min, max];\n        }\n\n    };\n\n    render.filter = function (cbak) {\n        // The cbak is run on every link and is expected to return true or false.\n    };\n\n    apijs(render)\n        .getset(config);\n\n    function calcRadius (n, nodeArc=config.nodeArc) {\n        // Given the number of nodes to allocate in the circumference and the arc that each node needs, calculate the minimum radius of the plot\n        // 2 * PI * r = totalArc = nodeArc * n\n        return ~~(nodeArc * n / (2 * Math.PI));\n    }\n\n    return d3.rebind(render, dispatch, \"on\");\n}\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}